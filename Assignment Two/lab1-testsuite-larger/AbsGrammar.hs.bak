-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGrammar where

newtype Id = Id String
  deriving (Eq, Ord, Show, Read)

data Program = PDefs [Used] [Def]
  deriving (Eq, Ord, Show, Read)

data Used = UDef Class
  deriving (Eq, Ord, Show, Read)

data Def = DFun Type Id [Arg] [Stm]
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Id
  deriving (Eq, Ord, Show, Read)

data Exp
    = EListId [Id]
    | EId Id
    | EAppApp Id Exp
    | EApp Id [Exp]
    | ClassDefId ClassI
    | ETrue
    | EFalse
    | EInt Integer
    | EDouble Double
    | EString String
    | EWeird String String
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ELs Exp Exp
    | ERs Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | ETyped Exp Type
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecls Type [Id]
    | SInit Type Id Exp
    | SReturn Exp
    | SReturnVoid
    | SWhile Exp Stm
    | SFor Exp Exp Exp Stm
    | SBlock [Stm]
    | SIfElse Exp Stm Stm
    | SIf Exp Stm
    | SThrow Exp
    | STypeDef Class Id
  deriving (Eq, Ord, Show, Read)

data Type
    = TypeDef Id Type
    | ConstType Type
    | ClassDefTy ClassT
    | Type_bool
    | Type_int
    | Type_double
    | Type_void
    | Type_string
  deriving (Eq, Ord, Show, Read)

data ClassI = ClassDef1 Id Id | ClassRDef1 Class Id
  deriving (Eq, Ord, Show, Read)

data ClassT = ClassDef2 Id Type | ClassRDef2 Class Type
  deriving (Eq, Ord, Show, Read)

data Class = CDefI ClassI | CDefT ClassT
  deriving (Eq, Ord, Show, Read)

