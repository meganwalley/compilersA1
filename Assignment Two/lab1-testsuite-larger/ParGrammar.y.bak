-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
%name pUse Use
%name pDef Def
%name pListUse ListUse
%name pListDef ListDef
%name pArg Arg
%name pListArg ListArg
%name pStm Stm
%name pListStm ListStm
%name pExp15 Exp15
%name pType Type
%name pClassI ClassI
%name pClassT ClassT
%name pClass Class
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp Exp
%name pExp1 Exp1
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListExp ListExp
%name pListId ListId
%name pListType ListType
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&' { PT _ (TS _ 2) }
  '&&' { PT _ (TS _ 3) }
  '(' { PT _ (TS _ 4) }
  ')' { PT _ (TS _ 5) }
  '*' { PT _ (TS _ 6) }
  '+' { PT _ (TS _ 7) }
  '++' { PT _ (TS _ 8) }
  ',' { PT _ (TS _ 9) }
  '-' { PT _ (TS _ 10) }
  '--' { PT _ (TS _ 11) }
  '.' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  '::' { PT _ (TS _ 14) }
  ';' { PT _ (TS _ 15) }
  '<' { PT _ (TS _ 16) }
  '<<' { PT _ (TS _ 17) }
  '<=' { PT _ (TS _ 18) }
  '=' { PT _ (TS _ 19) }
  '==' { PT _ (TS _ 20) }
  '>' { PT _ (TS _ 21) }
  '>=' { PT _ (TS _ 22) }
  '>>' { PT _ (TS _ 23) }
  'bool' { PT _ (TS _ 24) }
  'const' { PT _ (TS _ 25) }
  'double' { PT _ (TS _ 26) }
  'else' { PT _ (TS _ 27) }
  'false' { PT _ (TS _ 28) }
  'for' { PT _ (TS _ 29) }
  'if' { PT _ (TS _ 30) }
  'int' { PT _ (TS _ 31) }
  'return' { PT _ (TS _ 32) }
  'string' { PT _ (TS _ 33) }
  'throw' { PT _ (TS _ 34) }
  'true' { PT _ (TS _ 35) }
  'typedef' { PT _ (TS _ 36) }
  'using' { PT _ (TS _ 37) }
  'void' { PT _ (TS _ 38) }
  'while' { PT _ (TS _ 39) }
  '{' { PT _ (TS _ 40) }
  '||' { PT _ (TS _ 41) }
  '}' { PT _ (TS _ 42) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_quoted { PT _ (TL $$) }
  L_Id { PT _ (T_Id $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ( $1)) :: Double }

String  :: { String }
String   : L_quoted {  $1 }

Id :: { Id}
Id  : L_Id { Id ($1)}

Program :: { Program }
Program : ListUse ListDef { AbsGrammar.PDefs $1 $2 }
Use :: { Use }
Use : 'using' Class { AbsGrammar.UDef $2 }
Def :: { Def }
Def : Type Id '(' ListArg ')' '{' ListStm '}' { AbsGrammar.DFun $1 $2 $4 (reverse $7) }
ListUse :: { [Use] }
ListUse : {- empty -} { [] }
        | Use { (:[]) $1 }
        | Use ';' ListUse { (:) $1 $3 }
ListDef :: { [Def] }
ListDef : {- empty -} { [] }
        | Def ';' ListDef { (:) $1 $3 }
        | {- empty -} { [] }
        | Def ListDef { (:) $1 $2 }
        | Def { (:[]) $1 }
        | Def ListDef { (:) $1 $2 }
Arg :: { Arg }
Arg : Type Id { AbsGrammar.ADecl $1 $2 }
ListArg :: { [Arg] }
ListArg : Arg { (:[]) $1 } | Arg ',' ListArg { (:) $1 $3 }
Stm :: { Stm }
Stm : Exp ';' { AbsGrammar.SExp $1 }
    | Type ListId ';' { AbsGrammar.SDecls $1 $2 }
    | Type Id '=' Exp ';' { AbsGrammar.SInit $1 $2 $4 }
    | 'return' Exp ';' { AbsGrammar.SReturn $2 }
    | 'return' ';' { AbsGrammar.SReturnVoid }
    | 'while' '(' Exp ')' Stm { AbsGrammar.SWhile $3 $5 }
    | 'for' '(' Exp ';' Exp ';' Exp ')' Stm { AbsGrammar.SFor $3 $5 $7 $9 }
    | '{' ListStm '}' { AbsGrammar.SBlock (reverse $2) }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsGrammar.SIfElse $3 $5 $7 }
    | 'if' '(' Exp ')' Stm { AbsGrammar.SIf $3 $5 }
    | 'throw' Exp ';' { AbsGrammar.SThrow $2 }
    | 'typedef' Class Id ';' { AbsGrammar.STypeDef $2 $3 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp15 :: { Exp }
Exp15 : Id { AbsGrammar.EId $1 }
      | Id '.' Exp15 { AbsGrammar.EAppApp $1 $3 }
      | Id '(' ListExp ')' { AbsGrammar.EApp $1 $3 }
      | ClassI { AbsGrammar.ClassDefId $1 }
      | 'true' { AbsGrammar.ETrue }
      | 'false' { AbsGrammar.EFalse }
      | Integer { AbsGrammar.EInt $1 }
      | Double { AbsGrammar.EDouble $1 }
      | String { AbsGrammar.EString $1 }
      | String String { AbsGrammar.EWeird $1 $2 }
      | '(' Exp ')' { $2 }
Type :: { Type }
Type : Id '<' Type '>' { AbsGrammar.TypeDef $1 $3 }
     | 'const' Type '&' { AbsGrammar.ConstType $2 }
     | ClassT { AbsGrammar.ClassDefTy $1 }
     | 'bool' { AbsGrammar.Type_bool }
     | 'int' { AbsGrammar.Type_int }
     | 'double' { AbsGrammar.Type_double }
     | 'void' { AbsGrammar.Type_void }
     | 'string' { AbsGrammar.Type_string }
ClassI :: { ClassI }
ClassI : Id '::' Id { AbsGrammar.ClassDef1 $1 $3 }
       | Class '::' Id { AbsGrammar.ClassRDef1 $1 $3 }
ClassT :: { ClassT }
ClassT : Id '::' Type { AbsGrammar.ClassDef2 $1 $3 }
       | Class '::' Type { AbsGrammar.ClassRDef2 $1 $3 }
Class :: { Class }
Class : ClassI { AbsGrammar.CDefI $1 }
      | ClassT { AbsGrammar.CDefT $1 }
Exp14 :: { Exp }
Exp14 : Exp15 '++' { AbsGrammar.EPIncr $1 }
      | Exp15 '--' { AbsGrammar.EPDecr $1 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp14 { AbsGrammar.EIncr $2 }
      | '--' Exp14 { AbsGrammar.EDecr $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { AbsGrammar.ETimes $1 $3 }
      | Exp12 '/' Exp13 { AbsGrammar.EDiv $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { AbsGrammar.EPlus $1 $3 }
      | Exp11 '-' Exp12 { AbsGrammar.EMinus $1 $3 }
      | Exp12 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp { AbsGrammar.ELs $1 $3 }
      | Exp10 '>>' Exp { AbsGrammar.ERs $1 $3 }
      | Exp11 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '<' Exp10 { AbsGrammar.ELt $1 $3 }
     | Exp9 '>' Exp10 { AbsGrammar.EGt $1 $3 }
     | Exp9 '<=' Exp10 { AbsGrammar.ELtEq $1 $3 }
     | Exp9 '>=' Exp10 { AbsGrammar.EGtEq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp9 { AbsGrammar.EEq $1 $3 }
     | Exp8 '!=' Exp9 { AbsGrammar.ENEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsGrammar.EAnd $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { AbsGrammar.EOr $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { AbsGrammar.EAss $1 $3 } | Exp3 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
ListType :: { [Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

