module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs uses defs -> failure x
transUse :: Use -> Result
transUse x = case x of
  UDef class_ -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ id args stms -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADecl type_ id -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SExp exp -> failure x
  SDecls type_ ids -> failure x
  SInit type_ id exp -> failure x
  SReturn exp -> failure x
  SReturnVoid -> failure x
  SWhile exp stm -> failure x
  SFor exp1 exp2 exp3 stm -> failure x
  SBlock stms -> failure x
  SIfElse exp stm1 stm2 -> failure x
  SIf exp stm -> failure x
  SThrow exp -> failure x
  STypeDef class_ id -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EId id -> failure x
  EAppApp id exp -> failure x
  EApp id exps -> failure x
  ClassDefId classi -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EInt integer -> failure x
  EDouble double -> failure x
  EString string -> failure x
  EWeird string1 string2 -> failure x
  EPIncr exp -> failure x
  EPDecr exp -> failure x
  EIncr exp -> failure x
  EDecr exp -> failure x
  ETimes exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EPlus exp1 exp2 -> failure x
  EMinus exp1 exp2 -> failure x
  ELs exp1 exp2 -> failure x
  ERs exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELtEq exp1 exp2 -> failure x
  EGtEq exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  EAss exp1 exp2 -> failure x
  ETyped exp type_ -> failure x
transType :: Type -> Result
transType x = case x of
  TypeDef id type_ -> failure x
  ConstType type_ -> failure x
  ClassDefTy classt -> failure x
  Type_bool -> failure x
  Type_int -> failure x
  Type_double -> failure x
  Type_void -> failure x
  Type_string -> failure x
transClassI :: ClassI -> Result
transClassI x = case x of
  ClassDef1 id1 id2 -> failure x
  ClassRDef1 class_ id -> failure x
transClassT :: ClassT -> Result
transClassT x = case x of
  ClassDef2 id type_ -> failure x
  ClassRDef2 class_ type_ -> failure x
transClass :: Class -> Result
transClass x = case x of
  CDefI classi -> failure x
  CDefT classt -> failure x

